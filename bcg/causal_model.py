# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/02_causal_model.ipynb (unless otherwise specified).

__all__ = ['CausalGraph', 'view_graph', 'CausalModel']

# Cell
import dowhy as dw
from typing import List
import networkx as nx
import itertools

# Cell
class CausalGraph:
    def __init__(self, treatments:List[str], outcome:str='Y',
                 common_causes:List[str]=None, effect_modifiers:List[str]=None,
                 observed_nodes:List[str]=None, instruments:List[str]=None,
                 missing_nodes_as_confounders:bool=False,
                 add_unobserved_confounder:bool=True):
        if common_causes is None: common_causes = []
        if effect_modifiers is None: effect_modifiers = []
        if instruments is None: instruments = []
        if missing_nodes_as_confounders:
            all_passed_nodes = treatments + [outcome] + \
                common_causes + effect_modifiers + instruments
            missing_nodes = [node for node in all_passed_nodes if node not in observed_nodes]
            print(f'all_passed_nodes {all_passed_nodes} missing_nodes {missing_nodes}')
            common_causes = list(common_causes) + missing_nodes

        self. g = self.create_nx_digraph(treatments, outcome,
                                         common_causes, instruments,
                                         effect_modifiers, add_unobserved_confounder)

    @staticmethod
    def create_nx_digraph(treatments:List[str], outcome:str, common_causes:List[str],
                          instruments:List[str], effect_modifiers:List[str],
                          add_unobserved_confounder:bool=False):
        g = nx.DiGraph()
        g.add_edges_from([(treatment, outcome) for treatment in treatments])
        g.add_edges_from([(common_cause, treatment)
                          for common_cause, treatment in itertools.product(common_causes, treatments)])
        g.add_edges_from([(common_cause, outcome)
                          for common_cause in common_causes])
        g.add_edges_from([(effect_modifier, outcome) for effect_modifier in effect_modifiers])
        g.add_edges_from([(instrument, treatment) for instrument, treatment in itertools.product(instruments, treatments)])
        nx.set_node_attributes(g, True, 'observed')
        if add_unobserved_confounder:
            g.add_node('U', observed=False)
            g.add_edges_from([('U', treatment) for treatment in treatments])
            g.add_edge('U', outcome)

        return g

# Cell
def view_graph(self, kind:str='spectral'):
    try:
        layout = getattr(nx, f'{kind}_layout')(self.g)
    except AttributeError as ae:
        raise AttributeError(f'No nx.{kind}_layout found')
    nx.draw(self.g, layout=layout, with_labels=True)

CausalGraph.view_graph = view_graph

# Cell
class CausalModel:

    def __init__(self):
        cg = CausalGraph()
    def identify_effect(self):
        pass
    def estimate_effect(self):
        pass
    def refute_estimate(self):
        pass